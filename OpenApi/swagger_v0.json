{
  "openapi": "3.1.0",
  "info": {
    "title": "PxWeb",
    "description": "Official statistical data from Norway",
    "version": "v0.0.1"
  },
  "servers": [
    {
      "url": "https://data.qa.ssb.no"
    }
  ],
  "paths": {
    "/api/v0/{lang}/table": {
      "get": {
        "description": "lists all tables with statistics, If the user speaks another language than English, translate their request into English. You shoud use synonyms and the original seach-word in the query params, and also use multiple search words. You can put in many synonyms for the search params the user asks for",
        "operationId": "getTables",
        "parameters": [
          {
            "name": "lang",
            "in": "path",
            "description": "Two letter language code (ISO 639), 'en' for english and 'no' for norwegian",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "explode": false,
            "allowReserved": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Perform a free-text search for tables using an AND search logic. This search accepts multiple keywords and synonyms. Please try various synonyms for the search terms and include both synonyms and the original search words in the query parameters for improved results. Additionally, use multiple search words for the query",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "explode": false,
            "allowReserved": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false
      }
    },
    "/api/v0/{lang}/table/{id}": {
      "get": {
        "tags": [
          "Table"
        ],
        "summary": "Get Metadata about Table by {id}.",
        "description": "Used for listing detailed information about a specific table List all variables and values and all other metadata needed to be able to fetch data Also links to where to:  + Fetch. Where to get information about codelists",
        "operationId": "GetMetadataById",
        "parameters": [
          {
            "name": "lang",
            "in": "path",
            "description": "Two letter language code (ISO 639), 'en' for english and 'no' for norwegian",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "explode": false,
            "allowReserved": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Uniqe identifier for each table. It consist of 5 numbers.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    ,

    "post": {
        "tags": [
          "Table"
        ],
    "summary": "Get data from table by {id}.",
    "operationId": "GetTableDataByPost",
    "parameters": [
      {
            "name": "lang",
            "in": "path",
            "description": "Two letter language code (ISO 639), 'en' for english and 'no' for norwegian",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "explode": false,
            "allowReserved": false,
            "schema": {
              "type": "string"
            }
      },
      {
        "name": "id",
        "in": "path",
        "description": "Unique identifier for each table. It consists of 5 numbers.",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "description": "Request body for data selection",
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
			         "query": {
			           "type": "array",
                 "description": "An array of holding selection criteria for each variable.",
                 "items": {
			              "type": "object",
                    "properties": {
					              "code": {
                           "type": "string",
                           "description": "The code of the variable."
                        },
                        "selection": {
                            "type": "object",
                            "description": "Details of an individual selection criterion.",
                            "properties": {
                                 "filter": {
                                    "type": "string",
                                    "enum": ["item"],
                                    "description": "This field should allway be 'item'."
                                 },
                                 "values": {
                                    "type": "array",
                                    "minItems": 1,
                                    "description": "An array of value codes to be included in the selection.",
                                    "items": {
                                        "type": "string",
                                        "description": "A specific code value within the variable's code list."
                                    }
                                 }
							              }
						            }
                    },
                    "required": ["code", "selection"]
                   }
               },
               "response": {
                   "type": "object",
                   "description": "Details of an response",
                   "properties": {
                       "format": {
                          "type": "string",
                          "description": "Format of the response. Options are 'px'."
                        }
                   }
               }
            }
          }


        }
      }
    },
    "responses": {

    }
  }
    }
  },
  "components": {
    "schemas": {}
  }
}
